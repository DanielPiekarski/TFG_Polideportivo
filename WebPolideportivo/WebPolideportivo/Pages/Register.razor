@page "/"

<PageTitle>Registrar</PageTitle>

@layout EmptyLayout
@inject ApiService ApiService
@inject NavigationManager Nav

<div class="center-box">
    <h3>Registro</h3>
    <EditForm Model="usuario" OnValidSubmit="HandleRegister">
        <InputText class="form-input" @bind-Value="usuario.Nombre" placeholder="Nombre de usuario" maxlength="20" />
        <InputText class="form-input" @bind-Value="usuario.Contraseña" placeholder="Contraseña" type="password" maxlength="20" />
        <button class="form-button" type="submit">Registrarse</button>
    </EditForm>

    @if (msg != null)
    {
        <p style ="color:red">@msg</p>
    }

    <div class="link">
        <a href="/login">¿Ya estás registrado? Inicia sesión</a>
    </div>
</div>

<style>
    body {
        margin: 0;
        padding: 0;
        background-image: url('https://upload.wikimedia.org/wikipedia/commons/9/9a/3%2C3_millones_de_euros_para_recuperar_la_gesti%C3%B3n_del_polideportivo_Francisco_Fern%C3%A1ndez_Ochoa_de_Carabanchel_04.jpg');
        background-size: cover;
        background-position: center;
        height: 100vh;
        font-family: Arial, sans-serif;
    }

    .center-box {
        background-color: rgba(255, 255, 255, 0.95);
        padding: 2rem;
        border-radius: 16px;
        max-width: 400px;
        margin: 10vh auto;
        box-shadow: 0 4px 20px rgba(0,0,0,0.3);
    }

    .form-input {
        display: block;
        width: 100%;
        padding: 0.5rem;
        margin-bottom: 1rem;
        font-size: 1rem;
        border-radius: 8px;
        border: 1px solid #ccc;
    }

    .form-button {
        width: 100%;
        padding: 0.75rem;
        background-color: #4CAF50;
        color: white;
        font-size: 1rem;
        border: none;
        border-radius: 8px;
        cursor: pointer;
    }

        .form-button:hover {
            background-color: #45a049;
        }

    .link {
        text-align: center;
        margin-top: 1rem;
    }

        .link a {
            color: #007bff;
            text-decoration: none;
        }

            .link a:hover {
                text-decoration: underline;
            }

    h3 {
        text-align: center;
        margin-bottom: 1.5rem;
    }
</style>

@code {
    private UserDto usuario = new();
    private string? msg;

    private async Task HandleRegister()
    {
        string? nombreOriginal = usuario.Nombre;
        string? contraseñaOriginal = usuario.Contraseña;

        if (string.IsNullOrWhiteSpace(nombreOriginal) || nombreOriginal != nombreOriginal?.Trim())
        {
            msg = "El nombre de usuario no puede empezar ni terminar con espacios.";
            return;
        }

        if (string.IsNullOrWhiteSpace(contraseñaOriginal) || contraseñaOriginal != contraseñaOriginal?.Trim())
        {
            msg = "La contraseña no puede empezar ni terminar con espacios.";
            return;
        }

        if (!ValidarContraseña(contraseñaOriginal, out string error))
        {
            msg = error;
            return;
        }

        usuario.Nombre = nombreOriginal!.Trim();
        usuario.Contraseña = contraseñaOriginal!.Trim();

        var success = await ApiService.Register(usuario);
        if (!success)
        {
            msg = "El nombre de usuario ya existe.";
            return;
        }

        var token = await ApiService.Login(usuario);
        if (token is not null)
        {
            Nav.NavigateTo("/home");
        }
        else
        {
            msg = "Registrado, pero no se pudo iniciar sesión automáticamente. Por favor, inicia sesión.";
            Nav.NavigateTo("/login");
        }
    }

    private bool ValidarContraseña(string contraseña, out string errorMensaje)
    {
        errorMensaje = null;

        if (contraseña == null || contraseña.Length < 8)
        {
            errorMensaje = "La contraseña debe tener al menos 8 caracteres.";
            return false;
        }

        bool tieneMayuscula = false;
        bool tieneNumero = false;

        foreach (char c in contraseña)
        {
            if (char.IsUpper(c)) tieneMayuscula = true;
            if (char.IsDigit(c)) tieneNumero = true;
        }

        if (!tieneMayuscula)
        {
            errorMensaje = "La contraseña debe tener al menos una letra mayúscula.";
            return false;
        }

        if (!tieneNumero)
        {
            errorMensaje = "La contraseña debe tener al menos un número.";
            return false;
        }

        return true;
    }

}
