@page "/reservar"
<RequireAuth />

<PageTitle>Reservar</PageTitle>

@using Microsoft.AspNetCore.Components.Forms
@using WebPolideportivo.Models
@using WebPolideportivo.Services
@inject ApiService ApiService
@inject NavigationManager NavigationManager

<PageTitle>Reservar</PageTitle>

<h3>Buscar pistas disponibles</h3>

<div class="mb-4">
    <div class="row g-3">
        <div class="col-md-3">
            <label>Fecha:</label>
            <InputDate @bind-Value="fechaSeleccionada" class="form-control"
                       min="@datetoMin.ToString("yyyy-MM-dd")"
                       max="@datetoMax.ToString("yyyy-MM-dd")"
                       @onchange="OnFechaCambiada" />
        </div>
        <div class="col-md-2">
            <label>Hora inicio:</label>
            <select @bind="horaInicio" class="form-control">
                @foreach (var hora in HorasInicio)
                {
                    var disabled = fechaSeleccionada.Date == DateTime.Today && TimeSpan.Parse(hora) < DateTime.Now.TimeOfDay;
                    <option value="@hora" disabled="@disabled">@hora</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <label>Hora fin:</label>
            <select @bind="horaFin" class="form-control">
                @foreach (var hora in HorasFin)
                {
                    var disabled = fechaSeleccionada.Date == DateTime.Today && TimeSpan.Parse(hora) <= DateTime.Now.TimeOfDay;
                    <option value="@hora" disabled="@disabled">@hora</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <label>Tipo de deporte:</label>
            <InputSelect @bind-Value="tipoSeleccionado" class="form-control">
                <option value="">-- Todos --</option>
                <option value="Pádel">Pádel</option>
                <option value="Tenis">Tenis</option>
                <option value="Fútbol">Fútbol</option>
            </InputSelect>
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button class="btn btn-primary w-100" @onclick="BuscarDisponibles" disabled="@cargando">Buscar</button>
        </div>
    </div>
</div>

<div class="mt-3">
    <button class="btn btn-outline-secondary" @onclick="ToggleMapa">
        @(mostrarMapa ? "Ocultar" : "Mostrar") mapa de pistas
    </button>
</div>

@if (mostrarMapa)
{
    <br />
    <div style="position: relative; width: 800px; height: 600px;">
        <img src="images/Polideportivo-Lineas.png" style="width: 100%; height: 100%;" />

        @foreach (var pistaPos in PistasPosiciones)
        {
            bool disponible = false;
            if (disponibilidadMapa.TryGetValue(pistaPos.Id, out var d))
            {
                disponible = d;
            }

            var imagen = (pistaPos.Id == 15 || pistaPos.Id == 16)
            ? (disponible ? "images/CirculoVerdeFutbol.png" : "images/CirculoRojoFutbol.png")
            : (disponible ? "images/CirculoVerde.png" : "images/CirculoRojo.png");

            var cursorStyle = disponible ? "pointer" : "default";

            if (disponible)
            {
                <img src="@imagen"
                     style="position: absolute; top: @pistaPos.Top; left: @pistaPos.Left; width: @pistaPos.Width; height: @pistaPos.Height; cursor: @cursorStyle;"
                     @onclick="() => IrAReserva(pistaPos.Id)" />
            }
            else
            {
                <img src="@imagen"
                     style="position: absolute; top: @pistaPos.Top; left: @pistaPos.Left; width: @pistaPos.Width; height: @pistaPos.Height; cursor: @cursorStyle;" />
            }
        }
    </div>
}
else
{
    @if (cargando)
    {
        <div class="mt-3"><em>Cargando disponibilidad...</em></div>
    }
    else if (!string.IsNullOrEmpty(mensajeError))
    {
        <div class="alert alert-danger mt-3">@mensajeError</div>
    }
    else if (pistasFiltradas == null)
    {
        <p class="mt-3"><em>Seleccione los filtros para buscar pistas disponibles.</em></p>
    }
    else if (pistasFiltradas.Count == 0)
    {
        <p class="mt-3"><strong>No hay pistas disponibles en ese horario.</strong></p>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-3 g-4 mt-3">
            @foreach (var pista in pistasFiltradas)
            {
                var precioTotal = pista.PrecioPorHora * HorasReservadas;
                <div class="col">
                    <a href="@($"/pista/{pista.Id}?fecha={fechaConfirmada:yyyy-MM-dd}&horaInicio={horaInicioConfirmada}&horaFin={horaFinConfirmada}")" class="text-decoration-none text-dark">
                        <div class="card h-100 shadow-sm">
                            <div class="card-body">
                                <h5 class="card-title">@pista.Nombre</h5>
                                <p class="card-text">
                                    Tipo: <strong>@pista.Tipo</strong><br />
                                    Precio: <strong>@($"{pista.PrecioPorHora:F2}") € / hora</strong>
                                </p>
                                <p class="card-text">
                                    Reservando: @HorasReservadas hora(s) (@RangoHoras)
                                </p>
                                <p class="card-text">
                                    <strong>Total: @($"{precioTotal:F2}") €</strong>
                                </p>
                            </div>
                        </div>
                    </a>
                </div>
            }
        </div>
    }
}

@code {
    private DateTime fechaSeleccionada = DateTime.Today;
    private string horaInicio = "08:00";
    private string horaFin = "09:00";
    private string tipoSeleccionado = "";

    private string horaInicioConfirmada = "";
    private string horaFinConfirmada = "";
    private DateTime fechaConfirmada;

    private List<string> horasInicioDisponibles = new();
    private List<string> horasFinDisponibles = new();

    private List<Pista>? pistas;
    private List<Pista>? pistasFiltradas;

    private string? mensajeError;

    DateTime datetoMin = DateTime.Now;
    DateTime datetoMax = DateTime.Now.AddYears(1);

    private List<string> HorasInicio = Enumerable.Range(8, 14).Select(h => $"{h:00}:00").ToList();
    private List<string> HorasFin = Enumerable.Range(9, 14).Select(h => $"{h:00}:00").ToList();

    private bool mostrarMapa = false;
    private bool cargando = false;

    private int HorasReservadas => Math.Max(0, TimeSpan.Parse(horaFinConfirmada).Hours - TimeSpan.Parse(horaInicioConfirmada).Hours);
    private string RangoHoras => $"{horaInicioConfirmada} - {horaFinConfirmada}";

    private Dictionary<int, bool> disponibilidadMapa = new();

    private List<PosicionPista> PistasPosiciones = new()
    {
        new() { Id = 1, Top = "14px", Left = "21px", Width = "100px", Height = "192px" },
        new() { Id = 2, Top = "14px", Left = "125.5px", Width = "101px", Height = "192px" },
        new() { Id = 3, Top = "210px", Left = "21px", Width = "100px", Height = "189px" },
        new() { Id = 4, Top = "210px", Left = "125.5px", Width = "101px", Height = "189px" },
        new() { Id = 5, Top = "403px", Left = "21px", Width = "100px", Height = "190px" },
        new() { Id = 6, Top = "403px", Left = "125.5px", Width = "101px", Height = "190px" },
        //----------------------------------------------------------------------------------
        new() { Id = 7, Top = "58px", Left = "264px", Width = "59.5px", Height = "110px" },
        new() { Id = 8, Top = "58px", Left = "328px", Width = "58px", Height = "110px" },
        new() { Id = 9, Top = "172px", Left = "264px", Width = "59.5px", Height = "107px" },
        new() { Id = 10, Top = "172px", Left = "328px", Width = "58px", Height = "107px" },
        new() { Id = 11, Top = "332.5px", Left = "262.5px", Width = "59.5px", Height = "110px" },
        new() { Id = 12, Top = "332.5px", Left = "326.5px", Width = "58.5px", Height = "110px" },
        new() { Id = 13, Top = "446px", Left = "262.5px", Width = "59.5px", Height = "107px" },
        new() { Id = 14, Top = "446px", Left = "326.5px", Width = "58.5px", Height = "107px" },
        //----------------------------------------------------------------------------------
        new() { Id = 15, Top = "18px", Left = "425px", Width = "364px", Height = "203px" },
        new() { Id = 16, Top = "225px", Left = "425px", Width = "364px", Height = "201.5px" }
    };

    protected override async Task OnInitializedAsync()
    {
        pistas = await ApiService.GetPistasAsync();
        ActualizarHorasDisponibles();
    }

    private async Task BuscarDisponibles()
    {
        pistasFiltradas = null;
        mensajeError = null;
        disponibilidadMapa.Clear();

        var inicioHora = TimeSpan.Parse(horaInicio).Hours;
        var finHora = TimeSpan.Parse(horaFin).Hours;

        if (finHora <= inicioHora)
        {
            mensajeError = "La hora final debe ser mayor que la hora inicial.";
            return;
        }

        if (pistas is null) return;

        cargando = true;
        StateHasChanged();

        horaInicioConfirmada = horaInicio;
        horaFinConfirmada = horaFin;
        fechaConfirmada = fechaSeleccionada;

        pistasFiltradas = new();

        foreach (var pista in pistas)
        {
            if (!string.IsNullOrEmpty(tipoSeleccionado) && pista.Tipo != tipoSeleccionado)
                continue;

            var disponibilidad = await ApiService.GetDisponibilidadAsync(pista.Id, fechaConfirmada);

            var horasNecesarias = Enumerable.Range(inicioHora, finHora - inicioHora)
                                            .Select(h => fechaConfirmada.Date.AddHours(h))
                                            .ToList();

            bool disponible = horasNecesarias.All(h => disponibilidad.Contains(h));

            disponibilidadMapa[pista.Id] = disponible;

            if (disponible)
            {
                pistasFiltradas.Add(pista);
            }
        }

        cargando = false;
    }

    private async Task ToggleMapa()
    {
        if (!mostrarMapa)
        {
            await BuscarDisponibles();
        }
        mostrarMapa = !mostrarMapa;
    }

    private void IrAReserva(int pistaId)
    {
        var url = $"/pista/{pistaId}?fecha={fechaSeleccionada:yyyy-MM-dd}&horaInicio={horaInicio}&horaFin={horaFin}";
        NavigationManager.NavigateTo(url);
    }

    private void OnFechaCambiada(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var nuevaFecha))
        {
            fechaSeleccionada = nuevaFecha;
            ActualizarHorasDisponibles();
        }
    }

    private void ActualizarHorasDisponibles()
    {
        int horaActual = DateTime.Now.Hour + 1;
        int inicio = 8;
        int fin = 22;

        if (fechaSeleccionada.Date == DateTime.Today)
        {
            inicio = Math.Max(inicio, horaActual);
        }

        horasInicioDisponibles = Enumerable.Range(inicio, Math.Max(0, fin - inicio))
                                           .Select(h => $"{h:00}:00")
                                           .ToList();

        horasFinDisponibles = Enumerable.Range(inicio + 1, Math.Max(0, fin - (inicio + 1)))
                                        .Select(h => $"{h:00}:00")
                                        .ToList();

        if (!horasInicioDisponibles.Contains(horaInicio))
            horaInicio = horasInicioDisponibles.FirstOrDefault() ?? "08:00";

        if (!horasFinDisponibles.Contains(horaFin))
            horaFin = horasFinDisponibles.FirstOrDefault() ?? "09:00";
    }
}
