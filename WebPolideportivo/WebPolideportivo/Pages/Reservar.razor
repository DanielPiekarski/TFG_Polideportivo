@page "/reservar"
@using Microsoft.AspNetCore.Components.Forms
@using WebPolideportivo.Models
@using WebPolideportivo.Services
@inject ApiService ApiService
@inject IJSRuntime JSRuntime

<PageTitle>Reservar</PageTitle>

<h3>Buscar pistas disponibles</h3>

<div class="mb-4">
    <div class="row g-3">
        <div class="col-md-3">
            <label>Fecha:</label>
            <InputDate @bind-Value="fechaSeleccionada" class="form-control"
                                    min="@datetoMin.ToString("yyyy-MM-dd")"
                                    max="@datetoMax.ToString("yyyy-MM-dd")" />
        </div>
        <div class="col-md-2">
            <label>Hora inicio:</label>
            <select @bind="horaInicio" class="form-control">
                @foreach (var hora in horasInicioDisponibles)
                {
                    <option value="@hora">@hora</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <label>Hora fin:</label>
            <select @bind="horaFin" class="form-control">
                @foreach (var hora in horasFinDisponibles)
                {
                    <option value="@hora">@hora</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <label>Tipo de deporte:</label>
            <InputSelect @bind-Value="tipoSeleccionado" class="form-control">
                <option value="">-- Todos --</option>
                <option value="Pádel">Pádel</option>
                <option value="Tenis">Tenis</option>
                <option value="Fútbol">Fútbol</option>
            </InputSelect>
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button class="btn btn-primary w-100" @onclick="BuscarDisponibles">Buscar</button>
        </div>
    </div>
</div>

@if (pistasFiltradas == null)
{
    <p><em>Seleccione los filtros para buscar pistas disponibles.</em></p>
}
else if (pistasFiltradas.Count == 0)
{
    <p><strong>No hay pistas disponibles en ese horario.</strong></p>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4 mt-3">
        @foreach (var pista in pistasFiltradas)
        {
            var precioTotal = pista.PrecioPorHora * HorasReservadas;

            <div class="col">
                <a href="@($"/pista/{pista.Id}")" class="text-decoration-none text-dark" @onclick="() => GuardarDatosSeleccionados(pista)">
                    <div class="card h-100 shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title">@pista.Nombre</h5>
                            <p class="card-text">
                                Tipo: <strong>@pista.Tipo</strong><br/>
                                Precio: <strong>@(pista.PrecioPorHora.ToString("F2")) € / hora</strong>
                            </p>
                            <p class="card-text">
                                Reservando: @HorasReservadas hora(s) (@RangoHoras)
                            </p>
                            <p class="card-text">
                                <strong>Total: @(precioTotal.ToString("F2")) €</strong>
                            </p>
                        </div>
                    </div>
                </a>
            </div>
        }
    </div>
}

@code {
    private DateTime fechaSeleccionada = DateTime.Today;
    private string horaInicio = "08:00";
    private string horaFin = "09:00";
    private string tipoSeleccionado = "";

    private List<string> horasInicioDisponibles = Enumerable.Range(8, 14).Select(h => $"{h:00}:00").ToList();
    private List<string> horasFinDisponibles = Enumerable.Range(9, 14).Select(h => $"{h:00}:00").ToList();
    private List<string> tiposPistas = new() { "Pádel", "Tenis", "Fútbol" };

    private List<Pista>? pistas;
    private List<Pista>? pistasFiltradas;

    private string? mensajeError;

    DateTime datetoMin = DateTime.Now;
    DateTime datetoMax = DateTime.Now.AddYears(1);

    private int HorasReservadas => Math.Max(0, TimeSpan.Parse(horaFin).Hours - TimeSpan.Parse(horaInicio).Hours);
    private string RangoHoras => $"{horaInicio} - {horaFin}";

    protected override async Task OnInitializedAsync()
    {
        pistas = await ApiService.GetPistasAsync();
    }

    private async Task BuscarDisponibles()
    {
        pistasFiltradas = null;

        var inicioHora = TimeSpan.Parse(horaInicio).Hours;
        var finHora = TimeSpan.Parse(horaFin).Hours;

        if (finHora <= inicioHora)
        {
            mensajeError = "La hora final debe ser mayor que la hora inicial.";
            return;
        }

        if (pistas is null) return;

        mensajeError = null;
        pistasFiltradas = new();

        foreach (var pista in pistas)
        {
            if (!string.IsNullOrEmpty(tipoSeleccionado) && pista.Tipo != tipoSeleccionado)
                continue;

            var disponibilidad = await ApiService.GetDisponibilidadAsync(pista.Id, fechaSeleccionada);

            var horasNecesarias = Enumerable.Range(inicioHora, finHora - inicioHora)
                                            .Select(h => fechaSeleccionada.Date.AddHours(h))
                                            .ToList();

            if (horasNecesarias.All(h => disponibilidad.Contains(h)))
            {
                pistasFiltradas.Add(pista);
            }
        }
    }

    private void GuardarDatosSeleccionados(Pista pista)
    {
        JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "horaInicio", horaInicio);
        JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "horaFin", horaFin);
        JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "fechaSeleccionada", fechaSeleccionada.ToString("yyyy-MM-dd"));
    }
}
