@page "/mis-reservas"
<RequireAuth />
@inject ApiService ApiService

<PageTitle>Mis Reservas</PageTitle>

<h3>Reservas Actuales</h3>

@if (reservas == null)
{
    <p><em>Cargando reservas...</em></p>
}
else
{
    var ahora = DateTime.Now;
    var reservasActivas = reservas.Where(r => r.FechaHoraFin > ahora).ToList();
    var reservasPasadas = reservas.Where(r => r.FechaHoraFin <= ahora).ToList();

    if (reservasActivas.Count == 0)
    {
        <p>No tienes reservas activas.</p>
    }
    else
    {
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Pista</th>
                    <th>Fecha</th>
                    <th>Hora inicio</th>
                    <th>Hora fin</th>
                    <th>Precio total (€)</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var reserva in reservasActivas)
                {
                    <tr>
                        <td>@reserva.NombrePista</td>
                        <td>@reserva.FechaHoraInicio.ToString("yyyy-MM-dd")</td>
                        <td>@reserva.FechaHoraInicio.ToString("HH:mm")</td>
                        <td>@reserva.FechaHoraFin.ToString("HH:mm")</td>
                        <td>@($"{reserva.PrecioTotal:F2}")€</td>
                        <td class="text-end">
                            <button class="btn btn-danger btn-sm" @onclick="() => EliminarReserva(reserva.Id)">
                                Eliminar
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <h3 class="mt-5">Historial de Reservas</h3>

    @if (reservasPasadas.Count == 0)
    {
        <p>No tienes reservas anteriores.</p>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center mb-2">
            <p class="mb-0"><strong>Total:</strong> @reservasPasadas.Count reserva(s)</p>
            <button class="btn btn-outline-danger btn-sm" @onclick="BorrarHistorial">Borrar historial</button>
        </div>

        <table class="table table-bordered table-sm">
            <thead>
                <tr>
                    <th>Pista</th>
                    <th>Fecha</th>
                    <th>Hora inicio</th>
                    <th>Hora fin</th>
                    <th>Precio total (€)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var reserva in reservasPasadas)
                {
                    <tr class="text-muted">
                        <td>@reserva.NombrePista</td>
                        <td>@reserva.FechaHoraInicio.ToString("yyyy-MM-dd")</td>
                        <td>@reserva.FechaHoraInicio.ToString("HH:mm")</td>
                        <td>@reserva.FechaHoraFin.ToString("HH:mm")</td>
                        <td>@($"{reserva.PrecioTotal:F2}")€</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger">@mensajeError</div>
}

<style>
    .table {
        width: 100%;
        margin-bottom: 2em;
        border-collapse: collapse;
        font-size: 1em;
    }

        .table th, .table td {
            padding: 0.8em 1%;
            text-align: left;
            border-bottom: 1px solid #dee2e6;
        }

    .table-striped tbody tr:nth-child(odd) {
        background-color: #f9f9f9;
    }

    .table-hover tbody tr:hover {
        background-color: #f1f1f1;
    }

    .text-end {
        text-align: end;
    }

    .btn {
        padding: 0.5em 1.5em;
        font-size: 1em;
        border-radius: 0.4em;
        cursor: pointer;
        display: inline-block;
        width: auto;
    }

    .btn-sm {
        padding: 0.4em 1em;
        font-size: 0.9em;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
        border: none;
    }

        .btn-danger:hover {
            background-color: #c82333;
        }

    .btn-outline-danger {
        background-color: transparent;
        color: #dc3545;
        border: 1px solid #dc3545;
    }

        .btn-outline-danger:hover {
            background-color: #dc3545;
            color: white;
        }

    .d-flex {
        display: flex;
        flex-wrap: wrap;
    }

    .justify-content-between {
        justify-content: space-between;
    }

    .align-items-center {
        align-items: center;
    }

    .mt-5 {
        margin-top: 3em;
    }

    .mb-0 {
        margin-bottom: 0;
    }

    .mb-2 {
        margin-bottom: 1em;
    }

    .alert {
        padding: 1em;
        margin-top: 1em;
        border-radius: 0.5em;
        width: 100%;
        max-width: 100%;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }

</style>

@code {
    private List<Reserva>? reservas;
    private string? mensajeError;

    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await CargarReservas();
    }

    private async Task CargarReservas()
    {
        try
        {
            reservas = await ApiService.GetMisReservasAsync();
        }
        catch (Exception ex)
        {
            mensajeError = $"Error cargando reservas: {ex.Message}";
        }
    }

    private async Task EliminarReserva(int reservaId)
    {
        bool confirmacion = await JSRuntime.InvokeAsync<bool>("confirm", "¿Seguro que quieres eliminar esta reserva?");
        if (!confirmacion)
            return;

        try
        {
            await ApiService.EliminarReservaAsync(reservaId);
            await CargarReservas();
        }
        catch (Exception ex)
        {
            mensajeError = $"Error eliminando reserva: {ex.Message}";
        }
    }

    private async Task BorrarHistorial()
    {
        bool confirmar = await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas borrar todo el historial?");
        if (!confirmar)
            return;

        try
        {
            var ahora = DateTime.Now;
            var reservasPasadas = new List<Reserva>();
            if (reservas != null)
            {
                foreach (var reserva in reservas)
                {
                    if (reserva.FechaHoraFin <= ahora)
                    {
                        reservasPasadas.Add(reserva);
                    }
                }
            }

            foreach (var reserva in reservasPasadas)
            {
                await ApiService.EliminarReservaAsync(reserva.Id);
            }

            await CargarReservas();
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al borrar historial: {ex.Message}";
        }
    }
}
