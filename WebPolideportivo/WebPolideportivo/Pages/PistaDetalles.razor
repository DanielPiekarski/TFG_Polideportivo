@page "/pista/{Id:int}"
<RequireAuth />

<PageTitle>@(pista?.Nombre ?? "Pista")</PageTitle>

@using WebPolideportivo.Models
@using WebPolideportivo.Services

@inject ApiService ApiService
@inject NavigationManager NavigationManager

<PageTitle>@(pista?.Nombre ?? "Pista")</PageTitle>

@if (pista == null)
{
    <p><em>Cargando información...</em></p>
}
else
{
    <div class="row mt-2">
        <div class="col-md-8">
            <img src="@ImagenPista" alt="Imagen de la pista" class="img-fluid rounded shadow-sm w-100 mb-auto" />
        </div>

        <div class="col-md-4">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h3 class="card-title">@pista.Nombre</h3>
                    <h5 class="text-muted">@pista.Tipo</h5>
                    <hr />
                    <p>
                        <strong>Fecha reservada:</strong><br />
                        @FechaSeleccionada.ToString("yyyy-MM-dd")
                    </p>
                    <p>
                        <strong>Hora de inicio:</strong> @HoraInicio<br />
                        <strong>Hora de fin:</strong> @HoraFin
                    </p>
                    <p>
                        <strong>Precio por hora:</strong> @($"{pista.PrecioPorHora:F2}") €<br />
                        <strong>Horas reservadas:</strong> @HorasReservadas
                    </p>
                    <hr />
                    <h4>Total: <strong>@($"{(pista.PrecioPorHora * HorasReservadas):F2}") €</strong></h4>
                </div>
            </div>

            <div class="mt-3">
                <button class="btn btn-success w-100" @onclick="Reservar">Reservar</button>
            </div>

            @if (!string.IsNullOrEmpty(mensajeError))
            {
                <div class="alert alert-danger mt-2">
                    @mensajeError
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? fecha { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? horaInicio { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? horaFin { get; set; }

    private DateTime FechaSeleccionada;
    private string? HoraInicio;
    private string? HoraFin;

    private Pista? pista;

    private string? mensajeError;

    private int HorasReservadas => (int)(TimeSpan.Parse(HoraFin ?? "00:00") - TimeSpan.Parse(HoraInicio ?? "00:00")).TotalHours;

    private string ImagenPista => $"/images/pista-{pista?.Id}.png";

    protected override void OnParametersSet()
    {
        if (fecha != null)
        {
            FechaSeleccionada = DateTime.Parse(fecha);
        }
        HoraInicio = horaInicio;
        HoraFin = horaFin;
    }

    protected override async Task OnInitializedAsync()
    {
        pista = await ApiService.GetPistaPorIdAsync(Id);
    }

    private async Task Reservar()
    {
        if (pista == null || string.IsNullOrEmpty(HoraInicio) || string.IsNullOrEmpty(HoraFin))
        {
            mensajeError = "Por favor, asegúrate de seleccionar la hora de inicio y la hora de fin.";
            return;
        }

        var horaInicioDt = FechaSeleccionada.Date.Add(TimeSpan.Parse(HoraInicio));
        var horaFinDt = FechaSeleccionada.Date.Add(TimeSpan.Parse(HoraFin));

        try
        {
            await ApiService.CrearReservaAsync(pista.Id, horaInicioDt, horaFinDt);
            NavigationManager.NavigateTo("/mis-reservas");
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al hacer la reserva: {ex.Message}";
        }
    }
}
